version: '3.9'

services:
  # MinIO object store for the Iceberg warehouse
  minio:
    image: quay.io/minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address :9001
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Console
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 2s
      timeout: 10s
      retries: 5

  # Create the warehouse bucket using MinIO Client (one-shot)
  minio-init:
    image: quay.io/minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    entrypoint: ["/bin/sh", "-c"]
    command: |
      mc alias set local http://minio:9000 "$MINIO_ROOT_USER" "$MINIO_ROOT_PASSWORD" && \
      mc mb -p local/warehouse || true

  # Postgres backing store for Lakekeeper
  db:
    image: postgres:16
    environment:
      - POSTGRES_PASSWORD=postgres
      - PGDATA=/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5432 -d postgres"]
      interval: 2s
      timeout: 10s
      retries: 5
      start_period: 5s
    volumes:
      - lakekeeper-pg:/var/lib/postgresql/data

  # Run DB migrations for Lakekeeper
  lakekeeper-migrate:
    image: quay.io/lakekeeper/catalog:latest-main
    pull_policy: always
    environment: &lk_env
      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://postgres:postgres@db:5432/postgres
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://postgres:postgres@db:5432/postgres
      - LAKEKEEPER__AUTHZ_BACKEND=allowall
    restart: "no"
    command: ["migrate"]
    depends_on:
      db:
        condition: service_healthy

  # Lakekeeper REST catalog
  lakekeeper:
    image: quay.io/lakekeeper/catalog:latest-main
    pull_policy: always
    environment: *lk_env
    command: ["serve"]
    depends_on:
      lakekeeper-migrate:
        condition: service_completed_successfully
    ports:
      - "8181:8181"
    healthcheck:
      test: ["CMD", "/home/nonroot/lakekeeper", "healthcheck"]
      interval: 2s
      timeout: 10s
      retries: 5
      start_period: 5s

  # Seeder: creates namespaces (and later tables) through PyIceberg REST
  seeder:
    build:
      context: ..
      dockerfile: infra/seeder.Dockerfile
    environment:
      # Lakekeeper REST endpoint and MinIO credentials
      LAKEKEEPER_URI: http://lakekeeper:8181/catalog/
      WAREHOUSE: s3://warehouse/
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      AWS_REGION: us-east-1
    depends_on:
      lakekeeper:
        condition: service_healthy
    profiles: ["seed"]

volumes:
  lakekeeper-pg:

